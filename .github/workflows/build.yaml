name: Build and test

on:
  push:
    branches:
    - master
    tags:
    - "v*"
  pull_request:
    branches:
    - master

env:
  GRADLE_ARGS: "--info --stacktrace"


jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [11]
    steps:
    - uses: actions/checkout@v2

    - name: Setup
      uses: ./.github/setup
      with:
        java-version: ${{ matrix.java-version }}

    - name: Load caches
      uses: ./.github/cache

    - name: Compile JVM
      run: |
        set -eux
        ./gradlew compileTestKotlinJvm $GRADLE_ARGS

    - name: Compile JS
      run: |
        set -eux
        ./gradlew compileTestKotlinJs $GRADLE_ARGS

    - name: Compile native
      run: |
        set -eux
        ./gradlew linkDebugTestNative $GRADLE_ARGS

    - name: Compile samples
      run: |
        set -eux
        ./gradlew compileKotlinJvm compileKotlinNative -p samples $GRADLE_ARGS

    - name: Upload build artifact
      uses: ./.github/upload-artifact

  unit-tests:
    needs: build
    if: |
      !contains(github.event.head_commit.message, '[skip tests]')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [11]
    steps:
    - uses: actions/checkout@v2

    - name: Setup
      uses: ./.github/setup
      with:
        java-version: ${{ matrix.java-version }}

    - name: Load caches
      uses: ./.github/cache

    - name: Download build artifact
      uses: ./.github/download-artifact

    - name: Run linter
      run: |
        set -eux
        ./gradlew detekt $GRADLE_ARGS

    - name: Check ABI compatibility
      run: |
        set -eux
        ./gradlew apiCheck $GRADLE_ARGS

    - name: Run unit tests
      run: |
        set -eux
        ./gradlew allTests -x integ-tests:allTests $GRADLE_ARGS

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true

  integ-tests:
    needs: unit-tests
    if: |
      !contains(github.event.head_commit.message, '[skip tests]')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [11]
        es-major-version: [6, 7, 8]
        include:
        - es-major-version: 6
          es-version: 6.8.23
          es-config: elasticsearch.yml
        - es-major-version: 7
          es-version: 7.17.3
          es-config: elasticsearch.yml
        - es-major-version: 8
          es-version: 8.1.2
          es-config: elasticsearch-auth.yml
    steps:
    - uses: actions/checkout@v2

    - name: Start Elasticsearch
      run: |
        set -eu
        docker run -d \
          --name elasticsearch \
          -p 9200:9200 \
          -v $(pwd)/${{ matrix.es-config }}:/usr/share/elasticsearch/config/elasticsearch.yml \
          -e "discovery.type=single-node" \
          -e "ES_JAVA_OPTS=-Xms128m -Xmx256m" \
          --health-cmd="curl http://localhost:9200/_cluster/health" \
          --health-interval=5s \
          --health-timeout=2s \
          --health-retries=10 \
          elasticsearch:${{ matrix.es-version }}
        echo -n "Waiting Elasticsearch "
        until [ $(docker inspect -f '{{.State.Health.Status}}' elasticsearch) == "healthy" ]; do
          sleep 1
          echo -n .
        done

    - name: Setup Elasticsearch password
      if: ${{ matrix.es-major-version >= 8 }}
      run: |
        set -eux
        ELASTIC_PASSWORD=$( \
          docker exec elasticsearch \
            /usr/share/elasticsearch/bin/elasticsearch-reset-password --batch -u elastic | \
          awk 'BEGIN { FS=": "; } /^New value:/ { print $2; }' \
        )
        echo "ELASTIC_PASSWORD=$ELASTIC_PASSWORD" >> $GITHUB_ENV

    - name: Setup
      uses: ./.github/setup
      with:
        java-version: ${{ matrix.java-version }}

    - name: Load caches
      uses: ./.github/cache

    - name: Download build artifact
      uses: ./.github/download-artifact

    - name: Run integration tests
      run: |
        set -eux
        export ELASTIC_PASSWORD='${{ env.ELASTIC_PASSWORD }}'
        ./gradlew :integ-tests:check $GRADLE_ARGS

    - name: Run samples JVM
      run: |
        set -eux
        export ELASTIC_PASSWORD='${{ env.ELASTIC_PASSWORD }}'
        ./gradlew run -p samples $GRADLE_ARGS

    - name: Run samples native
      run: |
        set -eux
        export ELASTIC_PASSWORD='${{ env.ELASTIC_PASSWORD }}'
        ./gradlew runDebugExecutableNative -p samples $GRADLE_ARGS

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true

  publish:
    needs: integ-tests
    if: |
      always() &&
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Setup
      uses: ./.github/setup
      with:
        java-version: ${{ matrix.java-version }}

    - name: Load caches
      uses: ./.github/cache

    - name: Download build artifact
      uses: ./.github/download-artifact

    - name: Prepare publishing
      run: |
        set -eux
        echo '${{ secrets.SIGNING_KEY_CONTENT }}' | base64 -d > signing.gpg

    - name: Publish
      if: |
        github.event_name == 'push' &&
        startsWith(github.ref, 'refs/tags/v')
      run: |
        set -eux
        ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository \
          $GRADLE_ARGS \
          -Psigning.secretKeyRingFile="$PWD/signing.gpg" \
          -Psigning.keyId='${{ secrets.SIGNING_KEY_ID }}' \
          -Psigning.password='${{ secrets.SIGNING_KEY_PASSPHRASE }}' \
          -PsonatypeUser='${{ secrets.SONATYPE_USER }}' \
          -PsonatypePassword='${{ secrets.SONATYPE_PASSWORD }}'

  docs:
    needs: publish
    if: |
      always() &&
      github.event_name == 'push' && (
        startsWith(github.ref, 'refs/tags/v') ||
        github.ref == 'refs/heads/master' ||
        github.ref == 'refs/heads/docs'
      )
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        # We need to fetch last tag for version
        fetch-depth: 0

    - name: Setup
      uses: ./.github/setup
      with:
        java-version: 11

    - name: Load caches
      uses: ./.github/cache

    - name: Download build artifact
      uses: ./.github/download-artifact

    - name: Build docs
      run: ./gradlew mkdocsBuild --info

    - name: Build API docs
      run: ./gradlew dokkaHtmlMultiModule --info

    - name: Publish docs
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build/mkdocs
        # keep_files: true
        full_commit_message: Publish documentation

  cleanup:
    if: always()
    runs-on: ubuntu-latest
    needs: docs
    steps:
    - uses: geekyeggo/delete-artifact@v1
      with:
        name: Build
        failOnError: false
